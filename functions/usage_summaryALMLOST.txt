find . -name '*.h' -exec sh -c '
   for file; do
     echo "File: $file"
     sed -n -e "/\/\/[[:space:]]*[Uu][Ss][Aa][Gg][Ee][[:space:]]*:/,/^$/ {
       # Print the 'Usage' line as is
       /\/\/[[:space:]]*[Uu][Ss][Aa][Gg][Ee][[:space:]]*:/ {
         p; n;
       }
       # Indent and print the comment lines after 'Usage' line
       /^\/\// {
         s/^/    /; p;
       }
       # Skip over empty lines
       /^$/ {
         n;
       }
     }" "$file"
     echo "" # Optional: Add an empty line for better readability
   done
 ' sh {} + > usage_summary.txt

File: ./scale.h
// Usage: Scale<F, A, B>
    // Changes values in range 0 - 32768 to A-B
    // F, A, B: INTEGER
    // return value: INTEGER

File: ./int_select.h
// Usage: IntSelect<SELECTION, Int1, Int2...>
    // SELECTION: FUNCTION
    // Returns SELECTION of N 
    // If SELECTION is 0, the first integer is returned, if SELECTION is 1, the second and so forth.
    // N: numbers
    // return value: INTEGER

File: ./twist_angle.h
// Usage: TwistAngle<N, OFFSET>
    // Returns 0-32768 based on angle of twist
    // OFFSET: Adjustable offset (0-32768) to make the twistangle values line up with how you hold the hilt.
    // N : Number of times the values goes from 0 to 32768 and back per hilt revolution.
    // returned value: FUNCTION, same for all leds
// Usage: TwistAcceleration<MAX>
    // Returns 0-32768 based on acceleration of twist in one direction
    // MAX : Maximum acceleration needed to return 32768
    // returned value: FUNCTION, same for all leds

File: ./wavnum.h
// Usage: WavNum<>
    // Or: WavNum<EFFECT>
    // EFFECT: effect type
    // return value: INTEGER
    //
    // Returns which file was actually played.
    // First file returns 0. Even if the file is called 'clash1.wav'.

File: ./divide.h
// Usage: Divide<F, V>
    // Divide F by V
    // If V = 0, returns 0
    // F, V: FUNCTION, 
    // return value: FUNCTION
    // Please note that Divide<> isn't an exact inverse of Mult<> because mult uses fixed-point mathematics
    // (it divides the result by 32768) while Divide<> doesn't, it just returns F / V

File: ./increment.h
// Usage: IncrementModulo<PULSE, MAX, INCREMENT>
    // PULSE: FUNCTION (pulse type)
    // MAX: FUNCTION (not zero) defaults to Int<32768>
    // INCREMENT: FUNCTION defaults to Int<1>
    // Increments by I each time PULSE occurs wraps around when
    // it reaches MAX.
// Usage: ThresholdPulseF<F, THRESHOLD, HYST_PERCENT>
    // F: FUNCTION
    // THRESHOLD: FUNCTION (defaults to Int<32768>)
    // HYST_PERCENT: FUNCTION (defaults to Int<66>
    // Returns 32768 once when F > THRESHOLD, then waits until
    // F < THRESHOLD * HYST_PERCENT / 100 before going back
    // to the initial state (waiting for F > THRESHOLD).
// Usage: IncrementF<F, V, MAX, I, HYST_PERCENT>
    // Increases by value I (up to MAX) each time F >= V
    // Detection resets once F drops below V * HYST_PERCENT
    // if greater than MAX returns 0
    // F, V, I, MAX = numbers
    // HYST_PERCENT = percent (defaults to 66)
    // return value: INTEGER
